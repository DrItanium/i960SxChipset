/*
i960SxChipset
Copyright (c) 2020-2022, Joshua Scoggins
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#if 0
union CTL0Register {
    static constexpr size_t Address = 0xA104;
    byte reg;
    struct {
       byte byteEnable : 2;
       byte blast : 1;
       byte fail : 1;
       byte den : 1;
       byte burstAddress : 3;
    } bits;
};
union CTL1Register {
    static constexpr size_t Address = 0xA105;
    byte reg;
    struct {
        byte inRamSpace : 1;
        byte inIOSpace : 1;
        byte unused : 6;
    } bits;
};
#endif
#define CTL0Address 0xA104
#define CTL1Address 0xA105
#define AddressBase 0xA100
#define Address1Base 0xA101
#define Address2Base 0xA102
#define Address3Base 0xA103
EBI(BE0, EXTRA_P0, INPUT, LOW, HIGH, CTL0Address, 0 )
EBI(BE1, EXTRA_P1, INPUT, LOW, HIGH, CTL0Address, 1 )
EBI(BLAST_, EXTRA_P2, INPUT, LOW, HIGH, CTL0Address, 2)
EBI(FAIL, EXTRA_P3, INPUT, HIGH, LOW, CTL0Address, 3)
EBI(RAM_SPACE_, EXTRA_P4, INPUT, LOW, HIGH, CTL1Address, 0)
EBI(IO_SPACE_, EXTRA_P5, INPUT, LOW, HIGH, CTL1Address, 1)
EBI(W_R_, EXTRA_P6, INPUT, LOW, HIGH, AddressBase, 0)
ALIAS(Address0, W_R_)
EBI(Address1, EXTRA_P24, INPUT, LOW, HIGH, AddressBase, 1)
EBI(Address2, EXTRA_P25, INPUT, LOW, HIGH, AddressBase, 2)
EBI(Address3, EXTRA_P26, INPUT, LOW, HIGH, AddressBase, 3)
EBI(Address4, EXTRA_P27, INPUT, LOW, HIGH, AddressBase, 4)
EBI(Address5, EXTRA_P28, INPUT, LOW, HIGH, AddressBase, 5)
EBI(Address6, EXTRA_P29, INPUT, LOW, HIGH, AddressBase, 6)
EBI(Address7, EXTRA_P30, INPUT, LOW, HIGH, AddressBase, 7)

EBI(Address8, EXTRA_P31, INPUT, LOW, HIGH, Address1Base, 0)
EBI(Address9, EXTRA_P32, INPUT, LOW, HIGH, Address1Base, 1)
EBI(Address10, EXTRA_P33, INPUT, LOW, HIGH, Address1Base, 2)
EBI(Address11, EXTRA_P34, INPUT, LOW, HIGH, Address1Base, 3)
EBI(Address12, EXTRA_P35, INPUT, LOW, HIGH, Address1Base, 4)
EBI(Address13, EXTRA_P36, INPUT, LOW, HIGH, Address1Base, 5)
EBI(Address14, EXTRA_P37, INPUT, LOW, HIGH, Address1Base, 6)
EBI(Address15, EXTRA_P38, INPUT, LOW, HIGH, Address1Base, 7)

EBI(Address16, EXTRA_P39, INPUT, LOW, HIGH, Address2Base, 0)
EBI(Address17, EXTRA_P40, INPUT, LOW, HIGH, Address2Base, 1)
EBI(Address18, EXTRA_P41, INPUT, LOW, HIGH, Address2Base, 2)
EBI(Address19, EXTRA_P42, INPUT, LOW, HIGH, Address2Base, 3)
EBI(Address20, EXTRA_P43, INPUT, LOW, HIGH, Address2Base, 4)
EBI(Address21, EXTRA_P44, INPUT, LOW, HIGH, Address2Base, 5)
EBI(Address22, EXTRA_P45, INPUT, LOW, HIGH, Address2Base, 6)
EBI(Address23, EXTRA_P46, INPUT, LOW, HIGH, Address2Base, 7)

EBI(Address24, EXTRA_P47, INPUT, LOW, HIGH, Address3Base, 0)
EBI(Address25, EXTRA_P48, INPUT, LOW, HIGH, Address3Base, 1)
EBI(Address26, EXTRA_P49, INPUT, LOW, HIGH, Address3Base, 2)
EBI(Address27, EXTRA_P50, INPUT, LOW, HIGH, Address3Base, 3)
EBI(Address28, EXTRA_P51, INPUT, LOW, HIGH, Address3Base, 4)
EBI(Address29, EXTRA_P52, INPUT, LOW, HIGH, Address3Base, 5)
EBI(Address30, EXTRA_P53, INPUT, LOW, HIGH, Address3Base, 6)
EBI(Address31, EXTRA_P54, INPUT, LOW, HIGH, Address3Base, 7)

#undef CTL0Address
#undef CTL1Address
#undef AddressBase
#undef Address1Base
#undef Address2Base
#undef Address3Base
SINK(CLOCK_OUT, PORT_E7, OUTPUT, HIGH, LOW)
GPIO(GPIOSelect, PORT_B0, OUTPUT, LOW, HIGH)
GPIO(SD_EN, PORT_E2, OUTPUT, LOW, HIGH)
GPIO(SD_EN2, PORT_G5, OUTPUT, LOW, HIGH)
GPIO(DEN_, PORT_E5, INPUT, LOW, HIGH)
GPIO(Ready, PORT_E6, OUTPUT, LOW, HIGH)
GPIO(INT960_0_, PORT_B4, OUTPUT, LOW, HIGH)
GPIO(INT960_3_, PORT_B5, OUTPUT, LOW, HIGH)
GPIO(INT960_1, PORT_E3, OUTPUT, HIGH, LOW)
GPIO(INT960_2, PORT_E4, OUTPUT, HIGH, LOW)

SINK(SPI_OFFSET0, EXTRA_P7, OUTPUT, LOW, HIGH)
SINK(SPI_OFFSET1, EXTRA_P8, OUTPUT, LOW, HIGH)
SINK(SPI_OFFSET2, EXTRA_P9, OUTPUT, LOW, HIGH)
SINK(MEMBLK0_A0 , EXTRA_P10, OUTPUT, LOW, HIGH)
SINK(MEMBLK0_A1 , EXTRA_P11, OUTPUT, LOW, HIGH)
SINK(MEMBLK0_ , EXTRA_P12, OUTPUT, LOW, HIGH)
SINK(PSRAM_EN, EXTRA_P13, OUTPUT, LOW, HIGH)
SINK(TFT_CS, EXTRA_P14, OUTPUT, LOW, HIGH)
SINK(TFT_DC, EXTRA_P15, OUTPUT, LOW, HIGH)
SINK(IOEXP_INT0, EXTRA_P16, OUTPUT, LOW, HIGH)
SINK(IOEXP_INT1, EXTRA_P17, OUTPUT, LOW, HIGH)
SINK(IOEXP_INT2, EXTRA_P18, OUTPUT, LOW, HIGH)
SINK(IOEXP_INT3, EXTRA_P19, OUTPUT, LOW, HIGH)

IOEXP(RESET960, EXTRA_P20, OUTPUT, LOW, HIGH, 3, 0)
IOEXP(HLDA, EXTRA_P21, INPUT, HIGH, LOW, 3, 5)
IOEXP(HOLD, EXTRA_P22, OUTPUT, HIGH, LOW, 3, 6)
IOEXP(LOCK_, EXTRA_P23, OUTPUT, LOW, HIGH, 3, 7)
ALIAS(DATA_LO8_INT, IOEXP_INT0)
ALIAS(DATA_HI8_INT, IOEXP_INT1)
ALIAS(ADDRESS_LO_INT, IOEXP_INT2)
ALIAS(ADDRESS_HI_INT, IOEXP_INT3)

GPIO(Data0, PORT_F0, INPUT, LOW, HIGH)
GPIO(Data1, PORT_F1, INPUT, LOW, HIGH)
GPIO(Data2, PORT_F2, INPUT, LOW, HIGH)
GPIO(Data3, PORT_F3, INPUT, LOW, HIGH)
GPIO(Data4, PORT_F4, INPUT, LOW, HIGH)
GPIO(Data5, PORT_F5, INPUT, LOW, HIGH)
GPIO(Data6, PORT_F6, INPUT, LOW, HIGH)
GPIO(Data7, PORT_F7, INPUT, LOW, HIGH)

GPIO(Data8, PORT_K0, INPUT, LOW, HIGH)
GPIO(Data9, PORT_K1, INPUT, LOW, HIGH)
GPIO(Data10, PORT_K2, INPUT, LOW, HIGH)
GPIO(Data11, PORT_K3, INPUT, LOW, HIGH)
GPIO(Data12, PORT_K4, INPUT, LOW, HIGH)
GPIO(Data13, PORT_K5, INPUT, LOW, HIGH)
GPIO(Data14, PORT_K6, INPUT, LOW, HIGH)
GPIO(Data15, PORT_K7, INPUT, LOW, HIGH)
